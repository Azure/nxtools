---
####################################################
#          ModuleBuilder Configuration             #
####################################################
# Path to the Module Manifest to build (where path will be resolved from)
# SourcePath: ./Sampler/Sampler.psd1
# Output Directory where ModuleBuilder will build the Module, relative to module manifest
# OutputDirectory: ../output/Sampler
CopyPaths:
  - en-US
  # - Examples
  # - DSCResources
Encoding: UTF8
# Suffix to add to Root module PSM1 after merge (here, the Set-Alias exporting IB tasks)
# suffix: suffix.ps1
prefix: prefix.ps1
VersionedOutputDirectory: true
BuiltModuleSubdirectory: module

####################################################
#      ModuleBuilder Submodules Configuration      #
####################################################

NestedModule:
  PSNativeCmdDevKit:
    CopyOnly: true
    Path: ./output/RequiredModules/PSNativeCmdDevKit
    AddToManifest: false
    Exclude: PSGetModuleInfo.xml
  DscResource.Common:
    CopyOnly: true
    Path: ./output/RequiredModules/DscResource.Common
    AddToManifest: false
    Exclude: PSGetModuleInfo.xml

####################################################
#       Sampler Pipeline Configuration             #
####################################################
# Defining 'Workflows' (suite of InvokeBuild tasks) to be run using their alias
BuildWorkflow:
  '.': # "." is the default Invoke-Build workflow. It is called when no -Tasks is specified to the build.ps1
    - build
    - test
    - hqrmtest

  build:
    - Clean
    - Build_Module_ModuleBuilder
    - Build_NestedModules_ModuleBuilder
    - Create_changelog_release_output

  gcpol:
    - Clean
    - build
    - build_guestconfiguration_packages
    - cleanUnzippedGCPackages

  cleanUnzippedGCPackages: |
    {
      Get-ChildItem 'output\GCPolicyPackages\' -Directory | Remove-Item -Recurse -Force
    }

  pack:
    - build
    - gcpack
    - package_module_nupkg

  hqrmtest:
    - Invoke_HQRM_Tests_Stop_On_Fail

  # Defining test task to be run when invoking `./build.ps1 -Tasks test`
  test:
    - Pester_Tests_Stop_On_Fail
    - Pester_if_Code_Coverage_Under_Threshold
    # Use this task when you have multiple parallel tests, which produce multiple
    # code coverage files and needs to get merged into one file.
    #- Merge_CodeCoverage_Files

  publish:
    - publish_module_to_gallery
    - Publish_Release_To_GitHub
    # - Publish_GitHub_Wiki_Content
    - Create_ChangeLog_GitHub_PR

####################################################
#       HQRM  Configuration                      #
####################################################
DscTest:
  Pester:
    Configuration:
      Filter:
        Tag:
        ExcludeTag:
          - Common Tests - New Error-Level Script Analyzer Rules
      Output:
        Verbosity: Detailed
  Script:
    ExcludeSourceFile:
      - output
    ExcludeModuleFile:
      - Modules/DscResource.Common
      - Modules/PSNativeCmdDevKit
    MainGitBranch: main
####################################################
#       PESTER  Configuration                      #
####################################################

Pester:
  OutputFormat: NUnitXML
  # Excludes one or more paths from being used to calculate code coverage.
  ExcludeFromCodeCoverage:
    - Modules/DscResource.Common
    - Modules/PSNativeCmdDevKit
  # If no scripts are defined the default is to use all the tests under the project's
  # tests folder or source folder (if present). Test script paths can be defined to
  # only run tests in certain folders, or run specific test files, or can be use to
  # specify the order tests are run.
  Path:
    - tests/Unit
    # - tests/Unit
    # - tests/Integration
  Tag:
  ExcludeTagFilter:
    - PesterLanguage
    - bugLinuxGCAgent
  CodeCoverageThreshold: 0 # Set to 0 to bypass
  CodeCoverageOutputFile: JaCoCo_coverage.xml
  CodeCoverageOutputFileEncoding: ascii
  CodeCoverageMergedOutputFile: JaCoCo_Merged.xml

# Import ModuleBuilder tasks from a specific PowerShell module using the build
# task's alias. Wildcard * can be used to specify all tasks that has a similar
# prefix and or suffix. The module contain the task must be added as a required
# module in the file RequiredModules.psd1.
ModuleBuildTasks:
  Sampler:
    - '*.build.Sampler.ib.tasks'
  Sampler.GitHubTasks:
    - '*.ib.tasks'
  DscResource.DocGenerator:
    - 'Task.*'
  DscResource.Test:
    - 'Task.*'

####################################################
#               GitHub Configuration               #
####################################################
GitHubConfig:
  GitHubFilesToAdd:
    - 'CHANGELOG.md'
  ReleaseAssets:
    - output/GCPolicyPackages/InstalledApplicationLinux*.zip
    - output/GCPolicyPackages/LinuxGroupsMustExclude*.zip
    - output/GCPolicyPackages/LinuxGroupsMustInclude*.zip
    - output/GCPolicyPackages/NotInstalledApplication*.zip
    - output/GCPolicyPackages/PasswordPolicy_msid110*.zip
    - output/GCPolicyPackages/PasswordPolicy_msid121*.zip
    - output/GCPolicyPackages/PasswordPolicy_msid232*.zip
  GitHubConfigUserName: gaelcolas
  GitHubConfigUserEmail: psgallery@synedgy.com
  UpdateChangelogOnPrerelease: false

####################################################
#      DscResource.DocGenerator Configuration      #
####################################################
DscResource.DocGenerator:
  Generate_Conceptual_Help:
    MarkdownCodeRegularExpression:
      - '\`(.+?)\`' # Match inline code-block
      - '\\(\\)' # Match escaped backslash
      - '\[[^\[]+\]\((.+?)\)' # Match markdown URL
      - '_(.+?)_' # Match Italic (underscore)
      - '\*\*(.+?)\*\*' # Match bold
      - '\*(.+?)\*' # Match Italic (asterisk)

# Invoke-Build Header to be used to 'decorate' the terminal output of the tasks.
TaskHeader: |
  param($Path)
  ""
  "=" * 79
  Write-Build Cyan "`t`t`t$($Task.Name.replace("_"," ").ToUpper())"
  Write-Build DarkGray  "$(Get-BuildSynopsis $Task)"
  "-" * 79
  Write-Build DarkGray "  $Path"
  Write-Build DarkGray "  $($Task.InvocationInfo.ScriptName):$($Task.InvocationInfo.ScriptLineNumber)"
  ""
